# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Question-Only Mode

If the user starts a prompt with the word "question", respond concisely to their question without taking any action. Do not:
- Run terminal commands
- Edit files
- Search the codebase
- Make suggestions for changes
- Create pull requests

Simply provide a direct, concise answer to their question and wait for further instructions.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- For Next.js development servers, use the environment variable NEXT_SKIP_WATCHING_CONFIG=true to prevent constant restarting due to config file changes.
- Add cache-busting parameters to favicon resources to address browser caching issues.
- Create utility scripts in a dedicated scripts directory to automate common development tasks.
- Always add detailed comments to critical configuration files like next.config.js.
- Document common issues and solutions in a centralized markdown file.
- In Next.js apps, missing favicon files can cause 404 errors that fill console logs.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Next.js constantly restarts when it detects changes in the next.config.js file, creating environment variable NEXT_SKIP_WATCHING_CONFIG=true prevents this
- Creating bash utility scripts with clear documentation helps automate repetitive development tasks
- When facing resource conflicts (like port issues), create automated scripts to detect and resolve them
- Add cache-busting techniques to static resources by appending timestamps to prevent browser caching issues
- Organize documentation in a docs/ directory with detailed solutions for common issues

## Git Branching Workflow

### Branch Types
1. main (Production)
   - Always stable and deployable
   - Direct commits not allowed
   - Changes come only through PR merges from dev
   - Protected branch requiring PR reviews

2. dev (Development)
   - Main development branch
   - Feature branches merge here first
   - Used for preview deployments
   - Must pass tests before merging to main

3. feature/* (Feature Branches)
   - Created from dev branch
   - One branch per feature
   - Format: feature/descriptive-name
   - Merged back to dev when complete

 main

### Pull Request Templates

1. Feature Branch to Dev:
   ```markdown
   Title: [Cursor] Feature Description
   Base: dev
   Compare: feature/your-feature-name
   
   ## Changes
   - List specific changes made
   - One change per line
   - Be specific and clear
   
   ## Testing
   - List what was tested
   - Include preview deployment checks
   - Note any specific test cases
   
   ## Notes
   - Any additional context
   - Breaking changes if any
   - Dependencies or requirements
   ```

2. Dev to Main (Production):
   ```markdown
   Title: [Cursor] Merge dev into main for production
   Base: main
   Compare: dev
   
   ## Changes
   - List all features being promoted to production
   - Note any major updates or changes
   - Reference related PR numbers if applicable
   
   ## Testing
   - Confirm all changes verified in dev
   - List preview deployments tested
   - Note any specific production considerations
   
   ## Notes
   - Any deployment requirements
   - Breaking changes if any
   - Required environment variables
   ```

 dev
### Workflow Steps
1. Starting New Feature
   ```bash
   git checkout dev
   git pull origin dev
   git checkout -b feature/your-feature-name
   ```

2. Working on Feature
   - Make commits with clear messages
   - Push regularly to remote
   - Keep branch up to date with dev

3. Completing Feature
   - Push final changes
   - Create PR to dev branch
   - Get review and approval
   - Merge to dev
   - Delete feature branch

4. Production Release
   - Create PR from dev to main
   - Review deployment preview
   - Get final approval
   - Merge to main

### Checkpoints for Branch Management
I will help manage these git operations at these key points:
1. When starting new feature work
2. When feature implementation is complete
3. When merging to dev branch
4. When preparing for production release
5. When hotfixes are needed

### Common Commands
```bash
# Update dev branch
git checkout dev
git pull origin dev

# Create feature branch
git checkout -b feature/name

# Update feature branch with dev
git checkout feature/name
git merge dev

# Push changes
git push origin feature/name

# Clean up after merge
git branch -d feature/name
```

### PR Management Rules
- All pull requests will be handled through GitHub UI
- NO git commands for PR operations should be executed by Cursor
- Feature branches to dev: Use squash and merge
- Dev to main: Use regular merge
- Always maintain clean git history
- Include "[Cursor] " prefix in PR titles

### PR Instructions Checklist
Every time we talk about doing a pull request, do not execute any commands to start the process, as the user will be doing it on GitHub manually every time. Instead, provide the following information in a clear, organized format:

1. Which branch needs to be base, which is compare?
2. What's the title? (Always include "[Cursor] " prefix)
3. What's the complete description to copy/paste?
4. Are we doing squash and merge or regular merge?
5. Should the branch be deleted after merging?
6. Do we need to move back to a different branch after PR?

For feature branches to dev, always use squash and merge to maintain clean history.
For dev to main, always use regular merge to preserve feature commits.

### Current Task Status
[X] Initial Next.js setup
[X] Portfolio page implementation
[X] Solutions page implementation
[X] About page creation
[X] Timeline updates in About page
[X] Hero section content reordering
[X] Feature branch PR created
[X] Merge feature/copy-updates to dev (pending GitHub UI squash merge)
[X] Test in dev environment
[X] Prepare dev to main PR
[X] Fix development environment issues

### Technical Stack
- Next.js 14.2.16
- Tailwind CSS
- Framer Motion
- Modern gradient design system
- SEO optimizations
- Contentful CMS for blog content

### Design System
- Consistent gradient treatments
- Modern card designs
- Interactive hover effects
- Responsive layouts
- SEO-optimized structure

### Content Priority
1. AI and technical expertise
2. Sales leadership
3. Creative background (supporting)

### SEO Focus
- Proper heading hierarchy
- Meta descriptions
- Alt text for images
- Semantic HTML structure

# Scratchpad

## Current Project Status & Roadmap

### Completed Major Milestones
- [X] Initial Next.js setup with Tailwind CSS and modern design system
- [X] Core website structure implementation (Home, Portfolio, Solutions, About, Contact)
- [X] Basic SEO optimizations (meta tags, semantic HTML, proper heading hierarchy)
- [X] Form validation with Zod and React Hook Form integration
- [X] Email sending functionality via Resend API
- [X] Mobile navigation optimization
- [X] Enhanced error animations with glowing text effect
- [X] Improved form UI with transparent container and card styling
- [X] Contact form simplification and validation improvements
- [X] Contact form button alignment verification
- [X] Fixed development environment issues (constant restarting, favicon 404 errors)
- [X] Created development utility scripts for smoother workflow
- [X] Added comprehensive documentation for common issues and solutions

### Most Recent Task: Fix Development Environment Issues

We identified and resolved several development environment issues:

1. Environment Configuration:
   [X] Add environment variable to prevent Next.js from watching config
   [X] Create .env.local file with NEXT_SKIP_WATCHING_CONFIG=true
   [X] Document config file issues in comments

2. Script Development:
   [X] Create scripts/clean-ports.sh to kill processes on ports 3000/3001
   [X] Create scripts/restart-dev.sh for clean environment restart
   [X] Create scripts/create-favicon-files.sh to address missing favicon issues
   [X] Create scripts/fix-environment.sh as a master fix script
   [X] Make all scripts executable with proper permissions

3. Documentation:
   [X] Create docs/COMMON_ISSUES.md with detailed troubleshooting guides
   [X] Update README.md with information about development utilities
   [X] Add comments to critical configuration files

4. Fix Implementation:
   [X] Add cache-busting to favicon resources in app/layout.tsx
   [X] Create placeholder favicon files if missing
   [X] Improve error handling and debugging output

5. Branch Management:
   [X] Create feature/fix-dev-environment branch
   [X] Commit changes with detailed commit message
   [X] Push branch to GitHub for PR creation

### Next Steps

1. Pull Request Creation:
   [ ] Create PR from feature/fix-dev-environment to dev
   [ ] Get review and approval
   [ ] Merge to dev
   [ ] Test in dev environment

2. Future Enhancements:
   [ ] Create proper favicon files to replace placeholders
   [ ] Implement automated favicon generation from logo
   [ ] Add continuous integration tests for development environment

### Notes

The development environment fixes address several key issues:
- Next.js server constantly restarting due to config file changes
- Port conflicts between multiple server instances
- Missing favicon files causing 404 errors
- Cache-related issues preventing changes from appearing

The utility scripts provide a standardized way to fix common issues, making the development workflow smoother and more efficient. The documentation ensures that developers have clear guidance on troubleshooting and resolving issues.

### Previous Task: Content Format Standardization

We standardized on Markdown format for all content in the application:

1. Documentation of Content Format Decision:
   [X] Create Markdown Style Guide (docs/MARKDOWN_GUIDE.md)
   [X] Update documentation to reflect Markdown-only approach
   [X] Create content validation utilities to handle different format types
   [X] Add Rich Text to Markdown converter for legacy content
   [X] Update content handlers to prefer Markdown by default
   [X] Document content format decisions in DEPENDENCIES.md

2. Implementation Steps:
   [X] Fix linter errors in content validation utilities
   [X] Update ContentNode type definitions
   [X] Ensure backward compatibility with existing content
   [X] Create proper type guards for content format checking
   [X] Modify safeContentHandler to prioritize Markdown format
   [X] Add Rich Text to Markdown converter
   [X] Update documentation references in code comments

3. Testing:
   [X] Test content validation utilities with different content types
   [X] Verify Rich Text to Markdown converter results
   [X] Ensure backward compatibility with existing Rich Text content
   [X] Test content rendering in blog components
   [X] Verify error handling for invalid content