# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Question-Only Mode

If the user starts a prompt with the word "question", respond concisely to their question without taking any action. Do not:
- Run terminal commands
- Edit files
- Search the codebase
- Make suggestions for changes
- Create pull requests

Simply provide a direct, concise answer to their question and wait for further instructions.

# Complete File Analysis - Read Everything First

**CRITICAL RULE: Always read and understand the ENTIRE file before making any changes or suggestions.**

## Why This Matters

- **Context is Everything**: Code at the bottom of a file may affect changes at the top
- **Existing Patterns**: Understanding the full codebase patterns prevents inconsistent implementations
- **Hidden Dependencies**: Functions, imports, or configurations later in the file may be relevant
- **Avoid Duplication**: Functionality you're about to implement may already exist elsewhere in the file
- **Maintain Style**: Consistent coding patterns and conventions throughout the file
- **Prevent Breaking Changes**: Understanding all existing functionality prevents accidental breaks

## Required Process

### Before Making ANY Changes:

1. **Read the ENTIRE file** from top to bottom
2. **Understand the file's purpose** and overall structure
3. **Identify all existing functions, classes, and patterns**
4. **Note the coding style and conventions used**
5. **Map out dependencies and imports**
6. **Understand the data flow and architecture**

### When Analyzing Related Files:

1. **Read configuration files completely** (package.json, tsconfig.json, etc.)
2. **Understand component hierarchies** by reading parent and child components fully
3. **Review utility files entirely** to understand available helper functions
4. **Check type definitions completely** to understand data structures

## Implementation Guidelines

### ✅ DO:

- Read every line of the target file before suggesting changes
- Scan through related files to understand the broader context
- Look for existing patterns and follow them consistently
- Identify reusable functions or components already present
- Understand the file's role in the larger application architecture

### ❌ DON'T:

- Make assumptions about file contents based on filename alone
- Suggest adding functionality that already exists in the file
- Propose changes that break existing patterns without justification
- Ignore configuration or setup code at the top/bottom of files
- Skip reading imports, exports, or type definitions

## Verification Checklist

Before providing any code suggestions, confirm:

- [ ] I have read the complete file from start to finish
- [ ] I understand how my changes fit into the existing code structure
- [ ] I have identified any existing similar functionality
- [ ] I am following the established patterns and conventions
- [ ] My changes won't conflict with existing code later in the file
- [ ] I have considered all imports and dependencies

## Example Approach

```
1. First, let me read through the entire [filename] to understand its structure...
2. I can see this file handles [purpose] and follows [patterns]...
3. The existing code uses [conventions] and has [key functions/components]...
4. Based on my complete analysis, here's how to implement [requested change]...
```

**Remember: Thorough file analysis prevents bugs, maintains consistency, and leads to better solutions. Never rush to implement without understanding the full context.**

---

# Extended Thinking and Deep Analysis Rules

When approaching complex problems, feature implementations, or architectural decisions, use extended thinking to provide thorough analysis and well-reasoned solutions.

## When to Use Extended Thinking

Use extended thinking for:

- Complex feature implementations that require multiple steps
- Architectural decisions with trade-offs
- Debugging complex issues
- Code refactoring decisions
- Performance optimization strategies
- Database schema changes
- Security considerations
- Integration planning

## Extended Thinking Format

When encountering complex problems, think through them step-by-step:

```
<thinking>
Let me think about this carefully...

1. Understanding the problem:
   - What exactly is being asked?
   - What are the constraints?
   - What are the potential edge cases?

2. Analyzing the current state:
   - What exists currently?
   - What are the limitations?
   - What needs to change?

3. Considering approaches:
   - Option A: [describe approach, pros/cons]
   - Option B: [describe approach, pros/cons]
   - Option C: [describe approach, pros/cons]

4. Evaluating trade-offs:
   - Performance implications
   - Maintainability
   - Scalability
   - Developer experience
   - User experience

5. Implementation considerations:
   - What files need to be modified?
   - What dependencies are required?
   - What testing is needed?
   - What migration steps are required?

Based on this analysis, I recommend [chosen approach] because [reasoning].
</thinking>
```

## Response Structure

After extended thinking, provide:

1. **Summary**: Brief explanation of the recommended approach
2. **Implementation Plan**: Step-by-step breakdown
3. **Code Changes**: Specific files and modifications needed
4. **Considerations**: Important notes about the implementation
5. **Testing Strategy**: How to verify the solution works

## Example Usage

For complex problems like "Update timestamp tracking for goals without requiring database changes", first analyze all relevant files, understand the current architecture, consider multiple approaches, evaluate trade-offs, then provide a concise, actionable plan.

Always prioritize:

- Code maintainability
- Performance implications
- User experience
- Security considerations
- Scalability

# Tools

Note all the tools are in python3. So in the case you need to do batch proc.,essing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- For Next.js development servers, use the environment variable NEXT_SKIP_WATCHING_CONFIG=true to prevent constant restarting due to config file changes.
- Add cache-busting parameters to favicon resources to address browser caching issues.
- Create utility scripts in a dedicated scripts directory to automate common development tasks.
- Always add detailed comments to critical configuration files like next.config.js.
- Document common issues and solutions in a centralized markdown file.
- In Next.js apps, missing favicon files can cause 404 errors that fill console logs.
- NavLink component should use the same smooth scrolling offset logic as the main page to ensure consistent anchor link behavior.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Next.js constantly restarts when it detects changes in the next.config.js file, creating environment variable NEXT_SKIP_WATCHING_CONFIG=true prevents this
- Creating bash utility scripts with clear documentation helps automate repetitive development tasks
- When facing resource conflicts (like port issues), create automated scripts to detect and resolve them
- Add cache-busting techniques to static resources by appending timestamps to prevent browser caching issues
- Organize documentation in a docs/ directory with detailed solutions for common issues
- Complex merge conflicts can be resolved systematically by working through each file individually, preserving functionality while updating navigation structure
- Always create commit message files for multiline git commits and clean up temporary files afterward
- When migrating to single-page layouts, ensure all navigation links are updated consistently across all components
- Card hover effects require pointer-events-none on overlay elements to prevent interference with Framer Motion hover detection
- Cards on dark backgrounds need explicit background styling (bg-gray-900/60) and borders for proper visibility
- When debugging missing UI elements, check both CSS styling and pointer event handling as common causes
- Framer Motion whileHover animations work best when overlay divs don't intercept pointer events
- **CRITICAL: Card Disappearing Prevention** - To prevent cards from disappearing, use fallback opacity values (0.3 instead of 0), reduce negative margins on useInView (-50px instead of -100px), simplify overlay structures, add explicit z-index to content, and always include minHeight CSS to reserve space. Multiple development servers can cause content conflicts.
- Multiple Next.js development servers running simultaneously cause content conflicts and wrong content display - always kill all instances before starting fresh

## Git Branching Workflow

### Branch Types
1. main (Production)
   - Always stable and deployable
   - Direct commits not allowed
   - Changes come only through PR merges from dev
   - Protected branch requiring PR reviews

2. dev (Development)
   - Main development branch
   - Feature branches merge here first
   - Used for preview deployments
   - Must pass tests before merging to main

3. feature/* (Feature Branches)
   - Created from dev branch
   - One branch per feature
   - Format: feature/descriptive-name
   - Merged back to dev when complete

 main

### Pull Request Templates

1. Feature Branch to Dev:
   ```markdown
   Title: [Cursor] Feature Description
   Base: dev
   Compare: feature/your-feature-name
   
   ## Changes
   - List specific changes made
   - One change per line
   - Be specific and clear
   
   ## Testing
   - List what was tested
   - Include preview deployment checks
   - Note any specific test cases
   
   ## Notes
   - Any additional context
   - Breaking changes if any
   - Dependencies or requirements
   ```

2. Dev to Main (Production):
   ```markdown
   Title: [Cursor] Merge dev into main for production
   Base: main
   Compare: dev
   
   ## Changes
   - List all features being promoted to production
   - Note any major updates or changes
   - Reference related PR numbers if applicable
   
   ## Testing
   - Confirm all changes verified in dev
   - List preview deployments tested
   - Note any specific production considerations
   
   ## Notes
   - Any deployment requirements
   - Breaking changes if any
   - Required environment variables
   ```

 dev
### Workflow Steps
1. Starting New Feature
   ```bash
   git checkout dev
   git pull origin dev
   git checkout -b feature/your-feature-name
   ```

2. Working on Feature
   - Make commits with clear messages
   - Push regularly to remote
   - Keep branch up to date with dev

3. Completing Feature
   - Push final changes
   - Create PR to dev branch
   - Get review and approval
   - Merge to dev
   - Delete feature branch

4. Production Release
   - Create PR from dev to main
   - Review deployment preview
   - Get final approval
   - Merge to main

### Checkpoints for Branch Management
I will help manage these git operations at these key points:
1. When starting new feature work
2. When feature implementation is complete
3. When merging to dev branch
4. When preparing for production release
5. When hotfixes are needed

### Common Commands
```bash
# Update dev branch
git checkout dev
git pull origin dev

# Create feature branch
git checkout -b feature/name

# Update feature branch with dev
git checkout feature/name
git merge dev

# Push changes
git push origin feature/name

# Clean up after merge
git branch -d feature/name
```

### PR Management Rules
- All pull requests will be handled through GitHub UI
- NO git commands for PR operations should be executed by Cursor
- Feature branches to dev: Use squash and merge
- Dev to main: Use regular merge
- Always maintain clean git history
- Include "[Cursor] " prefix in PR titles

### PR Instructions Checklist
Every time we talk about doing a pull request, do not execute any commands to start the process, as the user will be doing it on GitHub manually every time. Instead, provide the following information in a clear, organized format:

1. Which branch needs to be base, which is compare?
2. What's the title? (Always include "[Cursor] " prefix)
3. What's the complete description to copy/paste?
4. Are we doing squash and merge or regular merge?
5. Should the branch be deleted after merging?
6. Do we need to move back to a different branch after PR?

For feature branches to dev, always use squash and merge to maintain clean history.
For dev to main, always use regular merge to preserve feature commits.

IMPORTANT: Always provide the PR title in a markdown code block for easy copying, like:
```
[Cursor] Your PR Title Here
```
And then provide the full description in a separate markdown block.

### Current Task: Next.js Website Development Progress

**🎯 PROJECT OVERVIEW**:
- Building a modern Next.js website with enhanced interactivity and performance
- Focus on clean, maintainable code and optimal user experience
- Implementing industry best practices for web development

**📊 RECENT MILESTONES**:
1. **Core Infrastructure**:
   - [X] Next.js project setup and configuration
   - [X] Development environment optimization
   - [X] Basic routing and navigation structure
   - [X] Layout and component architecture

2. **UI/UX Improvements**:
   - [X] Card hover effects and animations
   - [X] Footer cleanup and organization
   - [X] Navigation simplification
   - [X] Homepage interactivity enhancements

3. **Performance Optimizations**:
   - [X] Development server stability improvements
   - [X] Card rendering optimizations
   - [X] Navigation performance enhancements
   - [X] Layout rendering optimizations

**🚀 CURRENT STATUS**:
- **Branch**: `feature/post-claude-code-check-point` (ready for next development cycle)
- **Last Milestone**: Successfully merged dev to main for production deployment
- **Dev Server**: Ready to start on localhost:3001
- **Node.js**: v23.11.0 | **Next.js**: 14.2.30 | **Claude CLI**: 1.0.35
- **Environment**: All dependencies resolved, Claude Code audit issues fixed
- **Status**: Ready for next development tasks and enhancements

**✅ RESOLVED ISSUES**:
1. **Dependencies**: All packages properly installed (markdown-to-jsx, class-variance-authority, react-icons confirmed present)
2. **Build Cache**: .next cache cleared and rebuilt successfully
3. **Contentful Integration**: API working correctly (2 blog posts confirmed: "Sales: Mastering the Art of Persuasion" and "Beyond the Basics - Hidden Gems in Excel")
4. **Card Rendering**: Dimmed cards issue already fixed in code with fallback opacity, reduced margin triggers, and proper z-index

**📋 IMMEDIATE NEXT STEPS**:
1. **Testing Phase**:
   - [ ] Test all pages in development (homepage, blog, individual blog posts)
   - [ ] Verify Contentful blog posts are displaying correctly
   - [ ] Check all animations and hover effects
   - [ ] Test mobile responsiveness
   - [ ] Verify smooth scrolling and navigation

2. **Pre-Production Checklist**:
   - [ ] Run build command to ensure no build errors
   - [ ] Check for any console errors or warnings
   - [ ] Verify all environment variables are properly set
   - [ ] Test all interactive elements (calendar booking, navigation, etc.)

3. **Pull Request Preparation**:
   - [ ] Stage and commit all changes
   - [ ] Create PR from feature/last-few-touches to dev
   - [ ] Document all changes made in PR description
   - [ ] Request review and testing on preview deployment

**🔍 KEY LEARNINGS APPLIED**:
1. **Dependencies**: Always verify package.json before assuming missing dependencies
2. **Cache Issues**: Clear .next directory when experiencing build anomalies
3. **Environment Variables**: Contentful needs both server and client-side env vars
4. **Card Animations**: Already implemented fixes for visibility with fallback opacity and proper z-index

**📝 NOTES**:
- Blog functionality confirmed working via direct API test
- CSP already properly configured for Contentful in next.config.js
- Development environment stable with NEXT_SKIP_WATCHING_CONFIG=true
- All critical features functional and ready for comprehensive testing

**🎯 FUTURE ENHANCEMENTS**:
1. **Footer Improvements**:
   - Newsletter signup integration
   - Enhanced trust signals
   - Dynamic content based on page visited

2. **Performance Optimizations**:
   - Image optimization
   - Code splitting
   - Caching strategies

3. **User Experience**:
   - A/B testing framework
   - Analytics integration
   - User feedback collection

**📝 NOTES**:
- All major features successfully implemented and tested
- Development environment stable and optimized
- Ready for production deployment
- Foundation set for future enhancements

**🔍 MONITORING PLAN**:
1. **Post-Deployment Checks**:
   - Feature functionality verification
   - Performance metrics monitoring
   - Error rate tracking
   - User behavior analytics

2. **Performance Metrics**:
   - Page load times
   - Time to interactive
   - First contentful paint
   - Core Web Vitals

3. **User Experience**:
   - Navigation patterns
   - Feature usage
   - Error reports
   - User feedback

**🚀 DEPLOYMENT STRATEGY**:
1. **Pre-Deployment**:
   - Final testing in dev
   - Documentation review
   - Environment verification

2. **During Deployment**:
   - Staged rollout
   - Feature flag management
   - Performance monitoring

3. **Post-Deployment**:
   - Health checks
   - Performance monitoring
   - User feedback collection
   - Issue tracking

- For Claude (Anthropic) usage: install the `claude` CLI via Homebrew or use `tools/llm_api.py --provider anthropic`; ensure `ANTHROPIC_API_KEY` is set in the environment or `.env.local`.

