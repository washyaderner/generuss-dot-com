# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Question-Only Mode

If the user starts a prompt with the word "question", respond concisely to their question without taking any action. Do not:
- Run terminal commands
- Edit files
- Search the codebase
- Make suggestions for changes
- Create pull requests

Simply provide a direct, concise answer to their question and wait for further instructions.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## Git Branching Workflow

### Branch Types
1. main (Production)
   - Always stable and deployable
   - Direct commits not allowed
   - Changes come only through PR merges from dev
   - Protected branch requiring PR reviews

2. dev (Development)
   - Main development branch
   - Feature branches merge here first
   - Used for preview deployments
   - Must pass tests before merging to main

3. feature/* (Feature Branches)
   - Created from dev branch
   - One branch per feature
   - Format: feature/descriptive-name
   - Merged back to dev when complete

 main

### Pull Request Templates

1. Feature Branch to Dev:
   ```markdown
   Title: [Cursor] Feature Description
   Base: dev
   Compare: feature/your-feature-name
   
   ## Changes
   - List specific changes made
   - One change per line
   - Be specific and clear
   
   ## Testing
   - List what was tested
   - Include preview deployment checks
   - Note any specific test cases
   
   ## Notes
   - Any additional context
   - Breaking changes if any
   - Dependencies or requirements
   ```

2. Dev to Main (Production):
   ```markdown
   Title: [Cursor] Merge dev into main for production
   Base: main
   Compare: dev
   
   ## Changes
   - List all features being promoted to production
   - Note any major updates or changes
   - Reference related PR numbers if applicable
   
   ## Testing
   - Confirm all changes verified in dev
   - List preview deployments tested
   - Note any specific production considerations
   
   ## Notes
   - Any deployment requirements
   - Breaking changes if any
   - Required environment variables
   ```

 dev
### Workflow Steps
1. Starting New Feature
   ```bash
   git checkout dev
   git pull origin dev
   git checkout -b feature/your-feature-name
   ```

2. Working on Feature
   - Make commits with clear messages
   - Push regularly to remote
   - Keep branch up to date with dev

3. Completing Feature
   - Push final changes
   - Create PR to dev branch
   - Get review and approval
   - Merge to dev
   - Delete feature branch

4. Production Release
   - Create PR from dev to main
   - Review deployment preview
   - Get final approval
   - Merge to main

### Checkpoints for Branch Management
I will help manage these git operations at these key points:
1. When starting new feature work
2. When feature implementation is complete
3. When merging to dev branch
4. When preparing for production release
5. When hotfixes are needed

### Common Commands
```bash
# Update dev branch
git checkout dev
git pull origin dev

# Create feature branch
git checkout -b feature/name

# Update feature branch with dev
git checkout feature/name
git merge dev

# Push changes
git push origin feature/name

# Clean up after merge
git branch -d feature/name
```

### PR Management Rules
- All pull requests will be handled through GitHub UI
- NO git commands for PR operations should be executed by Cursor
- Feature branches to dev: Use squash and merge
- Dev to main: Use regular merge
- Always maintain clean git history
- Include "[Cursor] " prefix in PR titles

### PR Instructions Checklist
Every time we talk about doing a pull request, do not execute any commands to start the process, as the user will be doing it on GitHub manually every time. Instead, provide the following information in a clear, organized format:

1. Which branch needs to be base, which is compare?
2. What's the title? (Always include "[Cursor] " prefix)
3. What's the complete description to copy/paste?
4. Are we doing squash and merge or regular merge?
5. Should the branch be deleted after merging?
6. Do we need to move back to a different branch after PR?

For feature branches to dev, always use squash and merge to maintain clean history.
For dev to main, always use regular merge to preserve feature commits.

### Current Task Status
[X] Initial Next.js setup
[X] Portfolio page implementation
[X] Solutions page implementation
[X] About page creation
[X] Timeline updates in About page
[X] Hero section content reordering
[X] Feature branch PR created
[ ] Merge feature/copy-updates to dev (pending GitHub UI squash merge)
[ ] Test in dev environment
[ ] Prepare dev to main PR

### Technical Stack
- Next.js 14
- Tailwind CSS
- Framer Motion
- Modern gradient design system
- SEO optimizations

### Design System
- Consistent gradient treatments
- Modern card designs
- Interactive hover effects
- Responsive layouts
- SEO-optimized structure

### Content Priority
1. AI and technical expertise
2. Sales leadership
3. Creative background (supporting)

### SEO Focus
- Proper heading hierarchy
- Meta descriptions
- Alt text for images
- Semantic HTML structure

# Scratchpad

## Current Project Status & Roadmap

### Completed Major Milestones
- [X] Initial Next.js setup with Tailwind CSS and modern design system
- [X] Core website structure implementation (Home, Portfolio, Solutions, About, Contact)
- [X] Basic SEO optimizations (meta tags, semantic HTML, proper heading hierarchy)
- [X] Form validation with Zod and React Hook Form integration
- [X] Email sending functionality via Resend API
- [X] Mobile navigation optimization
- [X] Enhanced error animations with glowing text effect
- [X] Improved form UI with transparent container and card styling
- [X] Contact form simplification and validation improvements
- [X] Contact form button alignment verification

### Current Task: External Link Improvements

We are working on improving external links throughout the site:

1. Planning External Link Updates:
   [X] Identify all external links on the site
   [X] Ensure consistent security attributes (target="_blank", rel="noopener noreferrer")
   [X] Add proper ARIA labels for accessibility
   [X] Verify all URLs are correct and up-to-date
   [X] Consider adding visual indicators for external links

2. Implementation Steps:
   [X] Update external links in the main navigation
   [X] Verify portfolio links to external case studies
   [X] Check solution page external references
   [X] Ensure contact page external resources are properly configured
   [X] Add consistent styling for external links

3. Internal Linking Improvements:
   [X] Link solutions to corresponding portfolio projects
   [X] Add IDs to portfolio project cards for direct linking
   [X] Update "Learn more" links in solution cards to point to portfolio projects
   [X] Reorder portfolio projects to prioritize Excel Performance Dashboard
   [X] Add "coming soon" indicators to projects in development
   [X] Add YouTube video showcase to the portfolio page
   [ ] Test all internal navigation flows

4. Testing:
   [X] Verify all links open correctly in new tabs
   [X] Test accessibility of link labels
   [X] Ensure security attributes are present on all external links
   [X] Check mobile experience for external links
   [X] Test YouTube video playback and responsiveness
   [ ] Verify all internal navigation paths

### Completed Task: Footer Link Updates

We have updated the existing footer links without changing the structure:

1. Understanding & Analysis:
   [X] Located footer section in app/layout.tsx
   [X] Analyzed the existing footer structure and styling
   [X] Identified four main sections: Company Info, Solutions, Company Links, and Connect (social)
   [X] Noted the current styling and responsive grid layout

2. Link Updates Completed:
   [X] Changed "Web Design" to "App & Web Dev" in the Solutions section
   [X] Changed "n8n Automation" to "Business Automation" in the Solutions section
   [X] Added "Excel Optimization" above "Business Automation" in the Solutions section
   [X] Updated all solutions links to point to the appropriate sections on the solutions page
   [X] Added IDs to the solutions array items in solutions/page.tsx
   [X] Added id attributes to the solution cards in the solutions page for anchor links
   [X] Updated social media links with placeholder URLs (to be verified)
   [X] Added proper aria-labels to social links for improved accessibility
   [X] Added target="_blank" and rel="noopener noreferrer" for security and behavior
   [X] Committed changes to feature/footer branch
   [X] Pushed changes to remote repository

3. Pull Request Preparation:
   [ ] Create PR from feature/footer to dev branch
   [ ] Include detailed PR description
   [ ] Test all links to verify they work correctly in the preview deployment
   [ ] Ensure smooth scrolling to anchor points
   [ ] Verify social media URLs are correct

### Technical Implementation Details

Our footer link updates maintain the existing structure while improving navigation:

1. Link Structure:
   - Updated placeholder "#" links with actual section URLs on the solutions page
   - Used the Next.js Link component for internal navigation
   - Created a consistent pattern for section IDs

2. Section IDs:
   - Added ID properties to the solutions array in solutions/page.tsx
   - Added corresponding id attributes to the solution card divs
   - Used kebab-case for all IDs (e.g., "app-web-dev", "business-automation")
   - Ensured IDs match between the footer links and solutions page sections

### Progress Tracker
- [X] Initial Next.js setup
- [X] Portfolio page implementation
- [X] Solutions page implementation
- [X] About page creation
- [X] Timeline updates in About page
- [X] Form validation schema implementation
- [X] Email sending functionality
- [X] Form submission UX improvements
- [X] Form HTML validation fixes
- [X] CSP configuration fixes
- [X] Production deployment
- [X] Button functionality implementation
- [X] Mobile navigation opacity fixes
- [X] Contact form simplification
- [X] Desktop navigation branding fix
- [X] Form error animations enhancement
- [X] Contact form UI improvements
- [X] Footer solutions links update
- [X] Footer social media links update
- [X] Added section IDs to solutions page for anchor links
- [X] Added Upwork link to Company section
- [X] Updated Twitter link to @DegeneRussAI
- [X] Removed LinkedIn from social links
- [X] Audit all external links for security attributes
- [X] Added consistent external link indicators
- [X] Ensure all portfolio case study links are functional
- [X] Linked solution cards to corresponding portfolio projects
- [X] Added IDs to portfolio projects for direct linking
- [X] Reordered portfolio projects to prioritize Excel Performance Dashboard
- [X] Added "coming soon" text to projects in development
- [X] Added YouTube video showcase to portfolio page
- [X] Blog component styling and implementation
- [X] Merge conflict resolution in next.config.js
- [X] Test all internal navigation flows
- [X] Test all links on mobile devices
- [X] Document error resolutions and implement safety measures
- [X] Create PR for documentation and safety measures

### New Task: Documentation and Safety Measures

We are documenting our error resolution processes and implementing safety measures to prevent similar issues in the future:

1. Error Documentation and Resolution:
   [X] Identified merge conflicts in next.config.js
   [X] Resolved conflicts by merging image domains configuration
   [X] Fixed blog component styling issues related to Markdown vs. Rich Text rendering
   [X] Addressed Node.js version compatibility issues with Next.js 14
   [X] Documentation of temporary file cleanup process
   [X] Create safety checks for configuration files before merging
   [X] Document proper branch management procedures

2. Implementation of Safety Measures:
   [X] Add configuration validation comments to next.config.js
   [X] Create documentation for handling content type differences (Markdown vs. Rich Text)
   [X] Develop pre-merge checklist for critical configuration files
   [X] Add version compatibility notes to package.json
   [X] Implement consistent error handling patterns across components

3. Workflow Improvements:
   [X] Document proper temporary file management
   [X] Create branch synchronization procedure to avoid divergence
   [X] Establish clear testing protocols before merges
   [X] Define conflict resolution strategy for configuration files
   [X] Create component documentation for future reference

### Error Resolution Documentation

1. next.config.js Merge Conflicts
   - Issue: Conflicting image domain configurations between branches
   - Root Cause: Multiple branches modifying the same configuration section
   - Resolution: Merged the configurations to include all required domains
   - Prevention: Add comments explaining domain purpose and warning about modifications

2. Blog Component Styling Issues
   - Issue: Content not rendering properly with new Contentful integration
   - Root Cause: Transition from Markdown to Rich Text format without proper styling
   - Resolution: Updated BlogPost component to handle both Markdown and Rich Text formats
   - Prevention: Create content type validation and flexible rendering components

3. Git Workflow Issues
   - Issue: Temporary files left in repository history
   - Root Cause: Using temporary files for commit messages without cleanup
   - Resolution: Implemented cleanup procedures after commits
   - Prevention: Create Git hooks or workflow scripts to automatically remove temp files

### Safety Measures Implementation

1. Configuration File Safety
   - Add clearly marked warning comments to configuration files
   - Include purpose documentation for each configuration section
   - Implement validation checks for critical configuration values
   - Create separation between environment-specific and shared configurations

2. Content Type Safety
   - Add type checking for content formats before rendering
   - Implement fallback rendering options for different content types
   - Document content type requirements for each component
   - Create content validation utilities

3. Branch Management Safety
   - Document clear procedures for branch synchronization
   - Create pre-merge checklists for critical files
   - Establish naming conventions for feature branches by functionality
   - Implement strict PR review requirements for configuration changes

### Current PR Information
For feature/documentation-and-safety:
```markdown
Title: [Cursor] Add documentation and safety measures
Base: dev
Compare: feature/documentation-and-safety

## Changes
- Added detailed comments to next.config.js explaining domain configurations
- Created documentation for content type handling in blog components
- Added version compatibility notes to package.json
- Implemented configuration validation checks
- Added comments documenting branch management procedures
- Created pre-merge checklist documentation
- Added error resolution documentation to README
- Implemented safety measures for configuration files
- Added content type validation utilities
- Created fallback rendering options for different content formats

## Testing
- Verified that configuration validation works correctly
- Tested content type validation with various content formats
- Confirmed documentation clarity and completeness
- Validated pre-merge checklist effectiveness
- Tested branch synchronization procedures
- Verified that safety measures don't impact existing functionality

## Notes
- Using squash and merge to maintain clean git history
- Documentation-only changes won't affect site functionality
- Safety measures are non-invasive and enhance reliability
```